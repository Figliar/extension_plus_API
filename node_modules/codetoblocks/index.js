/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Register all subclasses automatically
 * Called in the beginning of the block creation process
 * @param {Distributor} distributor Object responsible for calling/creating correct Object to deal with node.
 */

// function registerAllSubclasses(distributor) {
//     ShebangNode.register(distributor);
//     VariableAssignmentNode.register(distributor);
//     LocalVariableNode.register(distributor);
//     CommentNode.register(distributor);
//     ControlsFlowNode.register(distributor);
//     EmptyLineNode.register(distributor);
//     IdentifierNode.register(distributor);
//     IfElseIfElseNode.register(distributor);
//     ForNumericNode.register(distributor);
//     ForGenericNode.register(distributor);
//     WhileNode.register(distributor);
//     FunctionCallNode.register(distributor);
//     FunctionDefinitionNode.register(distributor);
//     ReturnNode.register(distributor);
//     NumberNode.register(distributor);
//     VariableNode.register(distributor);
//     UnaryExpressionNode.register(distributor);
//     StringNode.register(distributor);
//     BooleanNode.register(distributor);
//     NilNode.register(distributor);
//     TableNode.register(distributor);
//     BinaryExpressionNode.register(distributor);
//     ParenthesizedExpressionNode.register(distributor);
//     // Repeat for other subclasses...
// }

// import Blockly from 'blockly'
// import BlocklyLua from 'blockly/lua'
// import { JSDOM } from 'jsdom'
// import { createBlocklyCode } from 'helpFunctions.mjs'

const Blockly = require('blockly');
const BlocklyLua = require('blockly/lua');
const JSDOM = require('jsdom');
const registerBlocks = require('./blocklyCustomBlocks');

// const dom = new JSDOM('<!DOCTYPE html><html><head></head><body></body></html>');
// window = dom.window
// document = dom.window.document

function createBlockly(tree){
    let isError;
    let workspace = new Blockly.Workspace();
    registerBlocks();
    console.log(tree)
    console.debug("tree.toString():\n", tree.toString());
    console.debug("tree.rootNode.toString():\n", tree.rootNode.toString());
    if(tree.rootNode.children) {
        try {
            let finalWorkspace = createBlocklyCode(tree.rootNode, distributor, undefined, null);
        } catch (error) {
            console.error(error);
            variableNames.forEach(function (missingNode) {
                console.error("Missing in: ", missingNode.toString(), "\n", missingNode.text, "\n");
            });
            Blockly.serialization.workspaces.load(state, workspace);
        }
    }
}

module.exports = createBlockly